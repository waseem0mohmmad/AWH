from scapy.layers.l2 import ARP, Ether, srp
from scapy.layers import http
from scapy.layers.dns import DNS
from scapy.layers.inet import TCP
import scapy.all as scapy
import socket
import os
num_get_start = ''
scan_scanning = ""
class intro: # o1
    num = ''
    intfc = ''

    def start_all(self): #main menu (M)
        print("\n------------------------------------------------")
        print("[+] *  Back for previous page\n[+] M  For main menu\n[+] Q  For quit the tool ")
        print("------------------------------------------------")
        print("1-Get started\n2-Help\n3-About")  # desine it
        self.intfc = input("enter number : ")

    def get_started(self):
        print("\n------------------------------------------------")
        print("1-scanning\n2-sniffing\n*-back")
        self.num = input("enter numer : ")


class scanning: # o2
    ss = ["q", "Q", "m", "M", "*"]
    scan = ""
    my_ip = "" #192.168.26.131
    my_network = ""
    subnet_mask = ""
    final_scan_result = []
    final_port_result = []
    final_port_result_range = []
    por = ""
    por1 = 0
    target_host = "0.0.0.0"
    start_port = 1
    end_port = 65535
    scan_ans_ls = []
    port_ans_ls = []
    port_ans_ls_range = []

    ports = [[22, "SSH"], [23, "Telnet"], [25, "SMTP"], [53, "DNS"], [80, "HTTP"], [110, "POP3"], [119, "NNTP"],[123, "NTP"],
             [135, "MSRPC"], [139, "NetBIOS"], [143, "IMAP"], [443, "HTTPS"], [445, "SMB"], [465, "SMTPS"],[5060, "SIP"],
             [5432, "PostgreSQL"], [563, "NNTPS"], [587, "SMTP"], [5900, "VNC"], [5901, "VNC"],[993, "IMAPS"],
             [995, "POP3S"], [1433, "MSSQL"], [1434, "MSSQL"], [1521, "Oracle"], [1720, "H.323"],[1723, "PPTP"],
             [3306, "MySQL"], [3389, "RDP"], [389, "LDAP"], [465, "SMTPS"], [5060, "SIP"], [5666, "NRPE"],[27015, "Steam"],
             [27017, "MongoDB"], [28015, "Steam"], [3306, "MySQL"], [3389, "RDP"], [10000, "Webmin"]]
            #1434, "MSSQL (Browser Service)
            # #these is 39 ports we need 1 more at least
    def get_my_ip(self):
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("192.168.26.2", 80))
        my_ip = s.getsockname()[0]
        subnet_mask = "255.255.255.0"
        self.my_ip = my_ip
        my_ip = '.'.join(my_ip.split('.')[:-1])  # 192.168.26
        self.my_network = my_ip + '.0/24'
        print("my ip : ", self.my_ip, "| my network : ", self.my_network)  # your network
        s.close()

    def get_ARP(self, ip, timeout=2):  # arp function
        arp_req = Ether(dst='ff:ff:ff:ff:ff:ff') / ARP(pdst=ip)  # try ETH_P_ARP ==> Ether
        self.scan_ans_ls = srp(arp_req, timeout=timeout, verbose=False)[0]
        for e in self.scan_ans_ls:
            self.final_scan_result.append({"ip": e[1].psrc, "mac": e[1].hwsrc, "HOSTNAME": None, "VENDOR_IP": None})
            self.final_scan_result = [x for i, x in enumerate(self.final_scan_result) if x not in self.final_scan_result[:i]]
        return self.final_scan_result
    def scanning(self):
        print("\n------------------------------------------------")
        print("1-NETWORK SCANNING\n2-PORT SCANNING\n3-VULNERABILITY SCANNING\n*-back")
        self.scan = input("enter number : ")

    def net_scan(self):
        print("\n------------------------------------------------")

        def display_scan_result(result):
            print("--------------------------------------")
            print("| IP\t\t | MAC ADDRESS\t     |")
            print("|----------------|-------------------|")
            for i in result:
                print("| {:<15}| {}".format(i["ip"], i["mac"]),end=" |\n")
            print("--------------------------------------")
        self.get_my_ip()
        self.get_ARP(self.my_network, 2)
        #set(self.final_scan_result)
        display_scan_result(self.final_scan_result)

    def por_scan(self):
        print("\n------------------------------------------------")

        def display_scan_result(result):
            print("----------------------")
            print("|\t  IP\t     |")
            print("|--------------------|")
            for i, ip in enumerate(result):
                print('|', i+1, '-', "{:<15}".format(ip["ip"]),end="|\n")
            print("----------------------")
        if len(self.final_scan_result) == 0:
            self.get_my_ip()
            self.get_ARP(self.my_network, 2)
            self.final_scan_result = [x for i, x in enumerate(self.final_scan_result) if x not in self.final_scan_result[:i]]
            display_scan_result(self.final_scan_result)
        elif len(self.final_scan_result) != 0:
            display_scan_result(self.final_scan_result)

    def display_port_result(self,final_result):
        print("\n-------------------------------------------")
        print("|IP\t\t| PORT \t| STATUS\t  |")
        print("|---------------|-------|-----------------|")
        for i in final_result:
            if isinstance(i, dict) and "result" in i:
                status = "OPEN" if i["result"] == 0 else "CLOSED/Filtered"
                status_color = "\033[92m" if i["result"] == 0 else "\033[91m"
                print("|{}\t| {}\t| {}{:<15}\033[0m |".format(i["ip"], i["port"], status_color, status))
        print("-------------------------------------------\n")

    def display_port_result_range(self, final_result):
        print(final_result)
        print("\n----------------------------------------------")
        print("| IP\t\t  | OPEN PORTS\t\t     |")
        print("|-----------------|--------------------------|")
        for i in final_result:
            print("\033[95m{}\033[0m\t|\033[94m{}\033[0m".format(i["ip"], i["port"]))
        if not final_result:  # check if the list is empty
            print("| No open ports found in the specified range |")
        print("----------------------------------------------\n")

    def port_scan_range(self, target_host, start_port, end_port):  #
        if len(self.scan_ans_ls) != 0:
            for port in range(start_port, end_port + 1):
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex((target_host, port))
                if result == 0:  # check if the connection was successful (i.e., the port is open)
                    self.final_port_result_range.append({"ip": target_host, "port": port, "result": result})
                    self.final_port_result_range = [x for i, x in enumerate(self.final_port_result_range) if x not in self.final_port_result_range[:i]]
                    print("in if 137")
                sock.close()
        else:#fix the list that take the start and end from
            print("in else 140")
            exit(self.por_scan())
        self.final_port_result_range = sorted(self.final_port_result_range,key=lambda x: x['port'])  # sort the results by port number
        self.final_port_result_range = [x for i, x in enumerate(self.final_port_result_range) if x not in self.final_port_result_range[:i]]
        self.display_port_result_range(self.final_port_result_range)#chek if it shoud be dectionare lis

    def port_scan(self, target_host, port):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((target_host, port))
        if result == 0:  # check if the connection was successful (i.e., the port is open)
            self.final_port_result.append({"ip": target_host, "port": port, "result": result})
            print(self.final_port_result)
            print("in if in port scan")
        elif result != 0:
            self.final_port_result.append({"ip": target_host, "port": port, "result": result})
            # self.final_port_result = [x for i, x in enumerate(self.final_port_result) if x not in self.final_port_result[:i]]
            # print(self.final_port_result)
        sock.close()
        # self.display_port_result(self.final_port_result)


class snifing:
    sniff = ''
    def sniffing(self):
        print("\n------------------------------------------------")
        print("1-HTTP\n2-DNS\n3-FTP\n*-back")#1-HTTP 2-dns 3-ftp 4-ssh *-back
        self.sniff = input("enter number : ")

    def http(self):
        def sniff_packets(interface):
            packets = []

            def process_http_packet(packet):
                if packet.haslayer(http.HTTPRequest):
                    if packet.haslayer(scapy.Raw):
                        load = packet[scapy.Raw].load.decode()  # Convert bytes to string using decode()
                        keywords = ["username", "user", "login", "password", "pass", "usr", "userID", "uname", "email",
                                    "userPassword", "pswd", "pwd"]
                        for keyword in keywords:
                            if keyword in load:
                                packets.append(load)
                                print(load)
                                break

            sniff_thread = scapy.AsyncSniffer(iface=interface, store=False, prn=process_http_packet, filter="port 80")
            sniff_thread.start()

            while True:
                print("\n-----------------------------------------------")
                user_input = input("[+] S to stop sniffing [+]\n[+] F to save the results [+] \n")
                print("-----------------------------------------------\n")
                if user_input.lower() == 's' or user_input.lower() == 'S':
                    break
                elif user_input.lower() == 'f' or user_input.lower() == 'F':
                    try:
                        sniff_thread.stop()  # Stop sniffing before asking for the file name
                        file_name = input("Enter a file name to save the output: ")
                        directory_path = f"sniff_results/{'http'}"  # Directory path for the chosen protocol
                        os.makedirs(directory_path, exist_ok=True)  # Create the directory if it doesn't exist
                        with open(os.path.join(directory_path, file_name), 'w') as f:
                            for packet_summary in packets:
                                f.write(packet_summary + '\n')
                        print("Results saved to file:", os.path.join(directory_path, file_name))
                        break
                    except IOError as e:
                        print("An error occurred while saving the results:", e)
                else:
                    print("\n*********************************************")
                    print("\n******* Wrong value ********")
                    print("\n*********************************************")
        sniff_packets("eth0")

    def dns(self):
        def sniff_dns_packets(interface):
            packets = []  # List to store captured packets
            sniff_thread = None

            def process_dns_packet(packet):
                if packet.haslayer(DNS):
                    dns_packet = packet[DNS]
                    packets.append(dns_packet.summary())
                    print(dns_packet.summary())

            try:
                sniff_thread = scapy.AsyncSniffer(iface=interface, filter="port 53", prn=process_dns_packet)
                sniff_thread.start()

                while True:
                    print("\n-----------------------------------------------")
                    user_input = input("[+] S to stop sniffing [+]\n[+] F to save the results [+] \n")
                    print("-----------------------------------------------\n")
                    if user_input.lower() == 's' or user_input.lower() == 'S':
                        sniff_thread.stop()
                        break
                    elif user_input.lower() == 'f' or user_input.lower() == 'F':
                        try:
                            sniff_thread.stop()  # Stop sniffing before asking for the file name
                            file_name = input("Enter a file name to save the output: ")
                            directory_path = f"sniff_results/{'dns'}"  # Directory path for the chosen protocol
                            os.makedirs(directory_path, exist_ok=True)  # Create the directory if it doesn't exist
                            with open(os.path.join(directory_path, file_name), 'w') as f:
                                for packet_summary in packets:
                                    f.write(packet_summary + '\n')
                            print("Results saved to file:", os.path.join(directory_path, file_name))
                            break
                        except IOError as e:
                            print("An error occurred while saving the results:", e)
                    else:
                        print("\n*********************************************")
                        print("\n******* Wrong value ********")
                        print("\n*********************************************")

            except KeyboardInterrupt:
                if sniff_thread is not None:
                    sniff_thread.stop()

        sniff_dns_packets("eth0")

    def ftp(self):
        def sniff_ftp_packets(interface):
            packets = []
            sniff_thread = None

            def process_ftp_packet(packet):
                if packet.haslayer(TCP) and packet.haslayer(scapy.Raw):
                    ftp_packet = packet[scapy.Raw].load.decode()
                    packets.append(ftp_packet)
                    print(ftp_packet)

            try:
                sniff_thread = scapy.AsyncSniffer(iface=interface, filter="port 21", prn=process_ftp_packet)
                sniff_thread.start()

                while True:
                    print("\n-----------------------------------------------")
                    user_input = input("[+] S to stop sniffing [+]\n[+] F to save the results [+] \n")
                    print("-----------------------------------------------\n")
                    if user_input.lower() == 's' or user_input.lower() == 'S':
                        sniff_thread.stop()
                        break
                    elif user_input.lower() == 'f' or user_input.lower() == 'F':
                        try:
                            sniff_thread.stop()  # Stop sniffing before asking for the file name
                            file_name = input("Enter a file name to save the output: ")
                            directory_path = f"sniff_results/{'ftp'}"  # Directory path for the chosen protocol
                            os.makedirs(directory_path, exist_ok=True)  # Create the directory if it doesn't exist
                            with open(os.path.join(directory_path, file_name), 'w') as f:
                                for packet_summary in packets:
                                    f.write(packet_summary + '\n')
                            print("Results saved to file:", os.path.join(directory_path, file_name))
                            break
                        except IOError as e:
                            print("An error occurred while saving the results:", e)
                    else:
                        print("\n*********************************************")
                        print("\n******* Wrong value ********")
                        print("\n*********************************************")
            except KeyboardInterrupt:
                if sniff_thread is not None:
                    sniff_thread.stop()

        sniff_ftp_packets("eth0")


class info: # o3
    hlp = ''
    abot = ''
    def help(self):
        print("\n------------------------------------------------")
        print("1-How to scan the Network\n2-How to sniff the Network\n*-Back")
        self.hlp = input("enter numer : ")

    def about(self):
        print("\n------------------------------------------------")
        print("This tool is specialized in a number of tasks that may benefit you in SCAN or SNIFF your private network or in your Penetration testing. ")
        print("created by:\n.Ahmad Almasharqa \n.Hanin Hashaikah \n.Waseem Mohammad ")
        self.abot = input("\npress * to back to main menu\n")
