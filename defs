from scapy.layers.l2 import ARP,Ether,srp
import socket
import subprocess
#from AWH_int_face import start_all as aw
num_get_start = ''
scan_scanning = ""
class intro: # o1
    num = ''
    intfc = ''
    def start_all(self): #main menu (M)
        print("\n------------------------------------------------")
        print("[+] *  Back for previous page\n[+] M  For main menu\n[+] Q  For quit the tool ")
        print("------------------------------------------------")
        print("1-Get started\n2-Help\n3-About")  # desine it
        intfc=input("enter number : ")
        self.intfc=intfc
    def get_started(self):
        print("\n------------------------------------------------")
        print("1-scanning\n2-sniffing\n*-back")
        num = input("enter numer : ")
        self.intfc = ""
        self.num = num

class scanning: # o2
    scan = ''
    my_ip = '' #192.168.26.131
    my_network = ""
    subnet_mask = ''
    final_scan_result = []
    final_port_result = []
    por = ""
    target_host = ""
    start_port = 1
    end_port = 65535

    def scanning(self):
        print("\n------------------------------------------------")
        print("1-NETWORK SCANNING\n2-PORT SCANNING\n3-VULNERABILITY SCANNING\n*-back")
        scan = input("enter number : ")
        self.scan = scan

    def net_scan(self):
        print("\n------------------------------------------------")
        def get_my_ip(self):
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("192.168.26.2",80))
            my_ip = s.getsockname()[0]
            subnet_mask = "255.255.255.0"
            self.my_ip = my_ip
            my_ip = '.'.join(my_ip.split('.')[:-1])#192.168.26
            self.my_network = my_ip + '.0/24'
            print("my ip : ",self.my_ip,"\tmy network : ",self.my_network) # your network
            s.close()

        def display_scan_result(result):
            print("----------------------------------------")
            print("IP\t\t|\tMAC ADDRESS")
            print("----------------------------------------")
            for i in result:
                print("{}\t|\t{}".format(i["ip"], i["mac"], ))
            print("----------------------------------------")

        def get_ARP(ip, timeout=1):  # arp function
            arp_req = Ether(dst='ff:ff:ff:ff:ff:ff') / ARP(pdst=ip)  # try ETH_P_ARP ==> Ether
            ans_ls = srp(arp_req, timeout=timeout, verbose=False)[0]
            for e in ans_ls:
                if e not in self.final_scan_result: # chek the daplicated
                    self.final_scan_result.append({"ip": e[1].psrc, "mac": e[1].hwsrc, "HOSTNAME": None, "VENDOR_IP": None})
            return self.final_scan_result

        get_my_ip(self)
        get_ARP(self.my_ip)
        display_scan_result(self.final_scan_result)
        return scanning

    def por_scan(self):
        print("\n------------------------------------------------")

        def display_scan_result(result):
            print("----------------------------------------")
            print("IP\t\t|\tMAC ADDRESS")
            print("----------------------------------------")
            for i in result:
                print("{}\t|\t{}".format(i["ip"], i["mac"], ))
            print("----------------------------------------")
        if self.final_scan_result != []:
            display_scan_result(self.final_scan_result)
        print("1- all ports\n2- chose ports range")
        self.por = input("enter number : ")
        def display_port_result(final_result):
            print("---------------------------------------------------------")
            print("IP\t\t|MAC ADDRESS\t\t|OPEN PORTS")
            print("---------------------------------------------------------")
            for i in final_result:
                print("{}\t|{}\t|{}".format(i["ip"], i["mac"], i["ports"]))
            print("---------------------------------------------------------")
        def port_scan(target_host, start_port, end_port):  #
            result = []
            arp_req = ARP(pdst=target_host)
            broadcast_eth = Ether(dst="ff:ff:ff:ff:ff:ff")
            broadcast_eth_arp_req_ = broadcast_eth / arp_req
            ans_ls = srp(broadcast_eth_arp_req_, timeout=1, verbose=False)[0]
            if len(result) != 0:
                # for i in range(0, len(ans_ls)):
                #     result.append({"ip": ans_ls[i][1].psrc, "mac": ans_ls[i][1].hwsrc})
                for port in range(start_port, end_port + 1):
                    sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)  # create a socket object
                    sock.settimeout(1)  # set the timeout for the connection attempt
                    result = sock.connect_ex((target_host, port))  # attempt to connect to the target host and port
                    self.final_port_result.append((port, result))
                if result == 0:  # if the connection was successful, print the open port number
                    # final_result.append({"ip":target_host,"ma":mac_address, "ports": port})
                    self.final_port_result.append({"ip": target_host, "mac": ans_ls[port][1].hwsrc, "ports": port})
                sock.close()
            display_port_result(self.final_port_result)
        port_scan(self.target_host,self.start_port,self.end_port)
def sniffing():
    print("\n------------------------------------------------")
    print("1-all\n2-HTTP\n3-TCP\n4-UDP\n5-IP\n*-back")
    sniff = input("enter number : ")

class info: # o3
    hlp=''
    abot=''
    def help(self):
        print("\n------------------------------------------------")
        print("1-How to scan the Network\n2-How to sniff the Network\n*-Back")
        hlp = input("enter numer : ")
        self.hlp = hlp

    def about(self):
        print("\n------------------------------------------------")
        print("This tool is specialized in a number of tasks that may benefit you in SCAN , SNIFF or DISCOVER your private network or in your Penetration testing. ")
        print("created by:\n.Ahmad Almasharqa \n.Hanin Hashaikah \n.Waseem Mohammad ")
        abot = input("\npress * to back to main menu\n")
        self.abot=abot
def qut():
    quit(qut)
