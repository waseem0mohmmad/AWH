from scapy.layers.l2 import ARP, Ether, srp
import socket
import struct
num_get_start = ''
scan_scanning = ""
class intro: # o1
    num = ''
    intfc = ''

    def start_all(self): #main menu (M)
        print("\n------------------------------------------------")
        print("[+] *  Back for previous page\n[+] M  For main menu\n[+] Q  For quit the tool ")
        print("------------------------------------------------")
        print("1-Get started\n2-Help\n3-About")  # desine it
        self.intfc = input("enter number : ")

    def get_started(self):
        print("\n------------------------------------------------")
        print("1-scanning\n2-sniffing\n*-back")
        self.num = input("enter numer : ")

class scanning: # o2
    ss = ["q", "Q", "m", "M", "*"]
    scan = ""
    my_ip = "" #192.168.26.131
    my_network = ""
    subnet_mask = ""
    final_scan_result = []
    final_port_result = []
    por = ""
    por1 = 0
    target_host = "0.0.0.0"
    start_port = 1
    end_port = 65535
    scan_ans_ls = []
    port_ans_ls = []
    top_50=[80, 443, 22, 53, 25, 110, 143, 21, 3306, 3389, 1194, 1723, 23, 1720, 5060, 1723, 119, 123, 139, 445, 135, 3306,
            3389, 5900, 995, 993, 1433, 1434, 587, 1521, 389, 5000, 5901, 110, 2222, 1194, 465, 3306, 21, 27017, 5666, 143,
            10000, 27015, 5432, 1723, 563, 3306, 28015, 3389]


    def get_my_ip(self):
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("192.168.26.2", 80))
        my_ip = s.getsockname()[0]
        subnet_mask = "255.255.255.0"
        self.my_ip = my_ip
        my_ip = '.'.join(my_ip.split('.')[:-1])  # 192.168.26
        self.my_network = my_ip + '.0/24'
        print("my ip : ", self.my_ip, "| my network : ", self.my_network)  # your network
        s.close()

    def get_ARP(self, ip, timeout=2):  # arp function
        arp_req = Ether(dst='ff:ff:ff:ff:ff:ff') / ARP(pdst=ip)  # try ETH_P_ARP ==> Ether
        self.scan_ans_ls = srp(arp_req, timeout=timeout, verbose=False)[0]
        for e in self.scan_ans_ls:
            #if self.final_scan_result not in self.final_scan_result: # chek the daplicated
            self.final_scan_result.append({"ip": e[1].psrc, "mac": e[1].hwsrc, "HOSTNAME": None, "VENDOR_IP": None})
        return self.final_scan_result
    def scanning(self):
        print("\n------------------------------------------------")
        print("1-NETWORK SCANNING\n2-PORT SCANNING\n3-VULNERABILITY SCANNING\n*-back")
        self.scan = input("enter number : ")

    def net_scan(self):
        print("\n------------------------------------------------")

        def display_scan_result(result):
            print("----------------------------------------")
            print("IP\t\t|MAC ADDRESS")
            print("----------------------------------------")
            for i in result:
                print("{}\t|\t{}".format(i["ip"], i["mac"], ))
            print("----------------------------------------")
        self.get_my_ip()
        self.get_ARP(self.my_network, 2)
        #set(self.final_scan_result)
        display_scan_result(self.final_scan_result)

    def por_scan(self):
        print("\n------------------------------------------------")


        def display_scan_result(result):
            print("----------------------------------------")
            print("IP")
            print("----------------------------------------")
            for i, ip in enumerate(result):
                print(i+1, '-', "{}".format(ip["ip"]))
            print("----------------------------------------")
        if len(self.final_scan_result) == 0:
            self.get_my_ip()
            self.get_ARP(self.my_network, 2)
            #self.final_scan_result = list(set(self.final_scan_result))
            display_scan_result(self.final_scan_result)
        elif len(self.final_scan_result) != 0:
            display_scan_result(self.final_scan_result)
    def display_port_result(self,final_result):
            print("---------------------------------------------------------")
            print("IP\t\t|OPEN PORTS")
            print("---------------------------------------------------------")
            for i in final_result:
                print("{}\t|{}".format(i["ip"], i["ports"]))
            print("---------------------------------------------------------")

    def port_scan(self,target_host, start_port, end_port):  #
        if len(self.scan_ans_ls) != 0:  # if the connection was successful, print the open port number
            # for i in range(0, len(ans_ls)):
            #     result.append({"ip": ans_ls[i][1].psrc, "mac": ans_ls[i][1].hwsrc})
            # final_result.append({"ip":target_host,"ma":mac_address, "ports": port})
            for port in range(start_port, end_port + 1):
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # create a socket object
                sock.settimeout(1)  # set the timeout for the connection attempt
                print(target_host)
                print(port)
                result = sock.connect_ex((target_host, port))  # attempt to connect to the target host and port
                self.final_port_result.append((port, result))
                self.final_port_result.append({"ip": target_host, "mac": self.scan_ans_ls[port][1].hwsrc, "port": port,
                                               "result": result})  # "mac": e[1].hwsrc
                sock.close()
        elif len(self.scan_ans_ls) == 0:
            exit(self.por_scan())
        self.final_port_result = list(set(self.final_port_result))
        self.final_port_result = sorted(self.final_port_result)
        self.display_port_result(self.final_port_result)


class snifing:
    sniff = ''
    def sniffing(self):
        print("\n------------------------------------------------")
        print("1-all\n2-HTTP\n3-TCP\n4-UDP\n5-IP\n*-back")
        self.sniff = input("enter number : ")

    def TCP(self):
        # create a raw socket and bind it to the network interface
        sniffer = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_TCP)
        sniffer.bind(('0.0.0.0', 0))

        # enable IP header reception on the socket
        sniffer.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
        sniffer.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 1024 * 1024)
        print("\n------------------------------------------------")
        print("[+] s  stop sniffer\n[+] f  save the result")
        print("------------------------------------------------")
        print("Sniffer running...")
        try:
            while True:
                # receive a packet and extract the TCP payload
                packet_data = sniffer.recvfrom(65565)[0]
                ip_header_len = (packet_data[0] & 0x0F) * 4
                tcp_payload = packet_data[ip_header_len + 20:]
                print(tcp_payload.decode('utf-8'))# print the payload to the console
                user_input = input('')# listen for user input
                if user_input == 's':
                    sniffer.close()# close the socket and exit the program
                    break
                elif user_input == 'f':# save the payload to a file
                    file_name = input("Enter a file name to save the output: ")
                    with open(file_name, 'a') as f:
                        f.write(tcp_payload.decode('utf-8'))
                        f.write('\n')
                        print('Payload saved to file: ', file_name, '.txt')

        except KeyboardInterrupt:
            # close the socket on keyboard interrupt
            sniffer.close()

class info: # o3
    hlp = ''
    abot = ''
    def help(self):
        print("\n------------------------------------------------")
        print("1-How to scan the Network\n2-How to sniff the Network\n*-Back")
        self.hlp = input("enter numer : ")

    def about(self):
        print("\n------------------------------------------------")
        print("This tool is specialized in a number of tasks that may benefit you in SCAN , SNIFF or DISCOVER your private network or in your Penetration testing. ")
        print("created by:\n.Ahmad Almasharqa \n.Hanin Hashaikah \n.Waseem Mohammad ")
        self.abot = input("\npress * to back to main menu\n")
def qut():
    quit(qut)
