#!/usr/bin/env python3
import AWH_font_styl
import defs
AWH_font_styl.fontStyl()
print("AWH giving you many option to sccane , sniffe , descover your network") #chang it another

ss = ["q","Q","m","M"]
o1 = defs.intro()
o2 = defs.scanning()
o3 = defs.info()
o4 = defs.snifing()
oo = [o1.intfc,o1.num,o2.scan,o2.por,o2.por1,o3.help,o3.about,o4.sniff]

def start():
    def MQ(i):
        if i == "m" or i == "M":  # main menu (M)
            m()
        elif i == "q" or i == "Q":  # quit (Q)
            exit()

    def po():

        def ip_port_scan():
            print("\n------------------------------------------------")
            o2.por = input("\n1- top 50 famous port\n2- chose port number\n3- chose ports range\n4- all ports\nenter number : ")
            if o2.por != "":  # (PORT SCANNING) chose ip number : --> 1- top 50 famous port 2- chose port number 3- chose ports range 4- all ports
                if o2.por == "1":  # 1- top 50 famous port
                    print("Those are the Most common Protocols")
                    ports = [[22, "SSH"],[23, "Telnet"],[25, "SMTP"],[53, "DNS"],[80, "HTTP"],[110, "POP3"],[119, "NNTP"],[123, "NTP"],
                             [135, "MSRPC"],[139, "NetBIOS"],[143, "IMAP"],[443, "HTTPS"],[445, "SMB"],[465, "SMTPS"],[5060, "SIP"],
                             [5432, "PostgreSQL"],[563, "NNTPS"],[587, "SMTP (Submission)"],[5900, "VNC"],[5901, "VNC"],[993, "IMAPS"],
                             [995, "POP3S"],[1433, "MSSQL"],[1434, "MSSQL (Browser Service)"],[1521, "Oracle"],[1720, "H.323"],[1723, "PPTP"],
                             [3306, "MySQL"],[3389, "RDP"],[389, "LDAP"],[465, "SMTPS"],[5060, "SIP"],[5666, "NRPE"],[27015, "Steam"],
                             [27017, "MongoDB"],[28015, "Steam"],[3306, "MySQL"],[3389, "RDP"], [10000, "Webmin"]]
                    print("\033[31m Write down the Port's number \033[0m" + '')
                    conter = 0
                    for i, port in enumerate(ports):
                        print(f"{i+1}- [{port[0]}]: {port[1]}", end=' ')
                        conter += 1
                        if conter % 5 == 0:
                            print()
                    enter = input("\n\n1- all\n2- chose ports\nenter number: ")
                    if enter == "1":
                        for i in o2.top_50:
                            o2.port_scan(o2.target_host, i,)
                            ip_port_scan()
                    elif enter == "2":
                        port_chek()
                    elif enter in ss:
                        MQ(enter)
                    elif enter == "*":
                        print("\n------------------------------------------------")
                        ip_port_scan()
                    else:
                        print("\n*********************************************")
                        print("\n******* Wrong value po 2 ********")
                        print("\n*********************************************")
                        po()
                elif o2.por =="2":#2- chose port number
                    """fix the other input"""
                    enter = input("enter port number")
                    o2.port_scan(o2.target_host, int(enter))
                    ip_port_scan()
                    #port_chek() fix the list error 
                elif o2.por == "3":  # 3- chose ports range
                    print("\n------------------------------------------------")
                    start_port = input("Enter the start port number: ")
                    try:
                        start_port = int(start_port)
                        o2.start_port = start_port
                    except:
                        pass
                    if isinstance(start_port, int):
                        if 0 > start_port or start_port > 65535:
                            print("\n*********************************************")
                            print("\n******* Wrong value po 4 ********")
                            print("\n*********************************************")
                            po()
                    elif isinstance(start_port, str):
                        if start_port in ss:
                            MQ(start_port)
                        elif start_port == "*":
                            ip_port_scan()
                        else:
                            print("\n*********************************************")
                            print("\n******* Wrong value po 5 ********")
                            print("\n*********************************************")
                            po()
                    end_port = input("Enter the end port number: ")
                    try:
                        end_port = int(end_port)
                        o2.end_port = end_port
                    except:
                        pass
                    if isinstance(end_port, int):
                        if start_port > end_port or end_port > 65535:
                            print("\n*********************************************")
                            print("\n******* Wrong value po 6 ********")
                            print("\n*********************************************")
                            po()
                    elif isinstance(end_port, str):
                        if end_port in ss:
                            MQ(start_port)
                        elif end_port == "*":
                            ip_port_scan()
                        else:
                            print("\n*********************************************")
                            print("\n******* Wrong value po 7 ********")
                            print("\n*********************************************")
                            po()
                    o2.port_scan_range(o2.target_host, o2.start_port, o2.end_port)
                elif o2.por == "4":  # 4- all ports
                    print("\n------------------------------------------------")
                    o2.port_scan_range(o2.target_host,o2.start_port,o2.end_port)
                    ip_port_scan()
                elif o2.por == "*":  # *-back
                    o2.por = " "
                    po()
                elif o2.por in ss:
                    MQ(o2.por)
                else:
                    print("\n*********************************************")
                    print("\n******* Wrong value po 8 ********")
                    print("\n*********************************************")
                    o1.num = "1"
                    ip_port_scan()
        def port_chek():
            port_list = []
            print("-----------------------------------------------")
            print("[+] r start scanning")
            print("-----------------------------------------------")
            while True:
                port = input("enter port number : ")
                try:
                    port = int(port)
                except:
                    pass
                if isinstance(port, int):
                    port_list.append(port)
                    print(port_list)
                elif isinstance(port, str):
                    if port == "r":  # chek if port list is int oe str
                        print(o2.target_host)
                        i = 0
                        for i in port_list:
                            print(i)
                            if i < len(port_list):
                                print(i)
                                o2.port_scan(o2.target_host, port_list[i])
                            i = +1
                            print(i)
                        po()
                    elif port in ss:
                        MQ(port)
                    elif port == "*":
                        po()
                    else:
                        print("\n*********************************************")
                        print("\n******* Wrong value po 3 ********")
                        print("\n*********************************************")
            # if isinstance(port, int):
            #     if 0 <= port <= 65535:
            #         for i in port_list:
            #             o2.port_scan(o2.target_host, i)
            #             po()
            #     else:
            #         print("\n*********************************************")
            #         print("\n******* Wrong value po 2 ********")
            #         print("\n*********************************************")
            #         po()
        o2.por_scan()
        por1 = input("chose ip number : ")
        try:
            por1 = int(por1)
            o2.por1 = por1
        except:
            pass
        if isinstance(por1, int):
            if por1 <= 0 or por1 > len(o2.final_scan_result):
                print("\n*********************************************")
                print("\n******* Wrong value for po 0 ********")
                print("\n*********************************************")
                po()
            else:
                ip = o2.final_scan_result[por1 - 1]
                o2.target_host = ip['ip']
                print("-----------------------------------------------")
                print("\033[91mTarget host IP is: {}\033[0m".format(o2.target_host))
                print("-----------------------------------------------")
                ip_port_scan()
        elif isinstance(por1, str):
            if por1 in ss:
                o1.intfc = ""
                o1.num = ""
                o2.scan = ""
                MQ(por1)
            elif por1 not in ss and por1 != "*":
                print("\n*********************************************")
                print("\n******* Wrong value po 1 ********")
                print("\n*********************************************")
                print(type(por1))
                por1 = ""
                po()
            elif por1 == "*":
                sc()


    def sc():
        o2.scanning()
        if o2.scan != "": # (scanning) 1-NETWORK SCANNING 2-PORT SCANNING 3-VULNERABILITY SCANNING *-back
            if o2.scan == "1": # 1-NETWORK SCANNING
                #o2.scan = ""
                o2.net_scan()
                sc()
            elif o2.scan == "2": # 2-PORT SCANNING
                po()
            elif o2.scan == "3": # 3-VULNERABILITY SCANNING
                print("")
            elif o2.scan == "*":  # *-back
                o2.scan = ""
                gs()
            elif o2.scan in ss:
                MQ(o2.scan)
            else:
                print("\n*********************************************")
                print("\n******* Wrong value 5 ********")
                print("\n*********************************************")
                sc()

    def sf():
        o4.sniffing()
        if o4.sniff != "": #1-all 2-HTTP 3-TCP 4-UDP 5-IP *-back
            if o4.sniff == "1":
                print("")
            elif o4.sniff == "2":
                print("")
            elif o4.sniff == "3":
                o4.TCP()
            elif o4.sniff == "4":
                print("")
            elif o4.sniff == "5":
                print("")
            elif o4.sniff == "*":
                gs()
            elif o4.sniff in ss:
                MQ(o4.sniff)
            else:
                print("\n*********************************************")
                print("\n******* Wrong value 2 ********")
                print("\n*********************************************")
                sf()

    def gs():
        o1.get_started()
        if o1.num != "": # (get start) 1-scanning 2-sniffing *-back
            if o1.num == "1": # 1-scanning
                sc() # 1-NETWORK SCANNING 2-PORT SCANNING 3-VULNERABILITY SCANNING *-back
            elif o1.num == "2": # 2-sniffing
                sf()
            elif o1.num == "*" : # *-back + main menu (M) (get started)
                m()
            elif o1.num in ss:
                MQ(o1.num)
            else:
                print("\n*********************************************")
                print("\n******* Wrong value 2 ********")
                print("\n*********************************************")
                gs()

    def h():
        o3.help()
        if o3.hlp != "": # (help) 1-How to scan the Network 2-How to sniff the Network *-Back
            if o3.hlp == "1":  # How to scan the Network
                print("\n------------------------------------------------")
                print("scan")
            elif o3.hlp == "2":  # How to sniff the Network
                print("\n------------------------------------------------")
                print("sniff")
            elif o3.hlp == "*":  # *-back + main menu (M) (get started)
                o3.hlp = "" # o1.intfc,o1.num,o2.scan,o2.por,o3.help,o3.about
                o1.intfc = ""
                m()
            elif o3.hlp in ss:
                MQ(o3.hlp)
            else:
                print("\n*********************************************")
                print("\n******* Wrong value 3 ********")
                print("\n*********************************************")
                h()

    def ab():
        o3.about()
        if o3.abot != "": # 3 - about
            if o3.abot == "*":  # *-back + main menu (M) (get started)
                o3.abot = ""
                m()
            elif o3.abot in ss:
                MQ(o3.abot)
            else:
                print("\n*********************************************")
                print("\n******* Wrong value 4 ********")
                print("\n*********************************************")
                ab()

    def m():
        o1.start_all()
        if o1.intfc != "": # main menu (M)
            if o1.intfc =="1": # 1-get start
                gs() # 1-scanning 2-sniffing *-back
            elif o1.intfc == "2": # 2-help
                h()
            elif o1.intfc == "3": # 3-about
                ab()
            elif o1.intfc == "q" or o1.intfc == "Q": # quit (qut)
                MQ("q")
            else:
                print("\n*********************************************")
                print("\n******* Wrong value 1 ********")
                print("\n*********************************************")
                o1.intfc = ""
                start()
    m()
start()
